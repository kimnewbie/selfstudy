	[오버로딩(overloading)]
	
	한 클래스 안에 같은 이름의 메서드 여러 개 정의 하는 것
	
	void println()
	void println(boolean x)
	void println(char x)
	void println(char[] x)
	void println(double x)
	void println(float x)
	void println(int x)
	void println(long x)
	void println(Object x)
	void println(String x)
	
	----------------------------> 오버로딩이 가능해서 여태껏 사용 할 수 있었던 부분!
	
	[오버로딩이 성립하기 위한 조건 3가지]
	1. 메서드 이름이 같아야 한다.
	2. 매개변수의 개수 또는 타입이 달라야 한다.
	3. 반환 타입(리턴값)은 영향 없다.
	
	
	[생성자(constructor)] = iv초기화 메서드
								_________　　　_______->객체(iv묶음)
	- 인스턴스가 생성될 때마다 호출되는 '인스턴스 초기화 메서드' (=iv 초기화)
	
	======iv초기화======
	Time t = new Time();
	t.hour = 12;
	t.minute = 34;
	t.secomd = 56; -----------같은 것---------> Time t = new Time(12, 34, 56);
	
	- 이름이 클래스 이름과 같아야 한다.
	
		클래스이름(타입 변수명, 타입 변수명, ...){
			// 인스턴스 생성 시 수행될 코드,
			// 주로 인스턴스 변수의 초기화 코드를 적는다.
		}
	:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		class Card{
		
			Card(){	// 매개변수 없는 생성자.
					// 인스턴스 초기화 작업
			}
			Card(String kind, int number){	// 매개변수 있는 생성자
				// 인스턴스 초기화 작업
			}
		
		}------------ 생성자 오버로딩, 매개변수가 달라 구분 가능
	:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	
	- 리턴값이 없다.(void 안붙임)
	- 모든 클래스는 반드시 생성자를 가져야 한다.
		ex) Card c = new Card(); // 기본 생성자 호출 Card()
	
	
	[기본 생성자(default constructor)]
	- 매개변수가 없는 생성자
	- 생성자가 하나도 없을 때만, 컴파일러가 자동 추가
	
	클래스이름(){}	//기본 생성자
	Point(){}
	
	
	[참조변수 this와 생성자this()]
	- this : 인스턴스 자신을 가리키는 참조변수
			 인스턴스의 주소가 저장되어 있다.
			 모든 인스턴스메서드에 지역변수로 숨겨진 채로 존재한다.
			 (선언하지 않고 바로 사용 가능)
	- this(), this(매개변수) : 생성자. 같은 클래스의 다른 생성자를 호출할 때 사용한다.
	
	※ this와 this()는 비슷하게 생겼을 뿐 완전히 다른 것이다.
	   this는 '참조 변수'이고, this()는 '생성자'이다.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	