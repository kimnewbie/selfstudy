class A11{
	int a;
	A11(){	}
}
public class Ex011{
	public static void main(String [] args){
		A11 a1 = new A11();		//###
		}//end main
}//end class

Q1 ##위치에서
	메모리 빌려오고 객체 생성하는 역할 : ( new )
	String은 null, int는 0으로 초기화하는 역할 : ( 생성자 A11() )
	new All()한 주소를 갖고 있는 것은 : ( a1 )
Q2 다음 생성자에 대한 설명이다. 빈칸을 채우시오.
	-[초기화]하는 역할
	-[객체 생성]할때 제일 먼저 실행되는 특수한 형태의 메서드
	-메서드의 일반형식에는 리턴값이 있지만 생성자는 [없다].
Q3 기본 생성자를 반드시 선언해야하는 경우를 적으시오.
	기본 생성자는 A11(){	}
	-[오버로딩]이 되면 기본생성자는 자동으로 생성되지 않음.
	-기본생성자는 하는 일이 없어도[상속]시 에러를 발생하는 경우가 있으므로, 수동적으로 무조건 선언하는 것을 권장함.
Q4 빈칸을 채우시오
----------------------------------------------------------------
	[java파일] A.java
			|----------------------- javac A.java
	[class파일] A.class
			|----------------------- java A
-----------------------------------------------------------------
	[(4)Class Loader]		[(5)Execution Engine]	[(6)Garbage Collector]
	↕						↕						↕
	___________________________________________________________
	[(7)Runtime Data Area]
	___________________________________________________________
1. (8)Class Loader : .class(바이트코드)파일들을 엮어서 JVM인 운영체제로 할당받은 메모리 영역이
					[Runtime Data Area]에 적재하는 역할
2. (9)Execution Engine : 적재된 .class(바이트코드)파일들을 기계어로 변경해 명령어 단위로 실행하는 역할
3. (10)Garbage collector : Heap 메모리영역에 생성된 객체들 중에 참조되지 않은 객체들을 탐색 후 제거
4. (11)Runtime Data Area : Method area(static 저장공간), heap(new 연산자), stack area(지역변수 저장공간), pc register(쓰레드 연관), native method stack


