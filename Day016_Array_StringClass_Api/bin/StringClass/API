	Arrays로 배열 다루기
	
	문자열의 비교와 출력 - equals(), toString()
	
		int[] 	arr   = {0,1,2,3,4};
		int[][] arr2D = {{11,12},{21,22}};

		1차원 배열일 때는 Arrays.toString()
		2차원 배열일 때는 Arrays.deepToString()
				
		System.out.println(Arrays.toString(arr)); //[0,1,2,3,4]
		System.out.println(Arrays.deepToString(arr2D)); //[[11,12],[21,22]]


		*문자열 비교할 때 equals를 사용, 요소를 하나하나 비교해야함
		str2D==str2D2 // error		
		
		String[][] str2D  = new String[][]{{"aaa","bbb"},{"AAA","BBB"}};
		String[][] str2D2 = new String[][]{{"aaa","bbb"},{"AAA","BBB"}};
		
		1차원 배열일 때는 Arrays.equlas()
		2차원 배열일 때는 Arrays.deepEqulas()
				
		System.out.println(Arrays.equals(str2D,str2D2)); //false
		System.out.println(Arrays.deepEquals(str2D,str2D2)); //true
		
	배열의 복사 - copyOf(), copyOfRange()
		
		int[] arr  = {0,1,2,3,4};
										▼ 복사할 요소의 개수
		int[] arr2 = Arrays.copyOf(arr, arr.length); //0,1,2,3,4
		int[] arr2 = Arrays.copyOf(arr, 3); //0,1,2
		int[] arr2 = Arrays.copyOf(arr, 7); //0,1,2,3,4,0,0
											from, to(포함x)
		int[] arr2 = Arrays.copyOfRange(arr, 2, 4); //
		int[] arr2 = Arrays.copyOfRange(arr, 0, 7); //
		
	배열의 정렬 - sort()
		
		int[] arr = {3,2,0,1,4};
		Arrays.sort(arr); // 배열 arr을 오름차순 정렬한다.
		System.out.println(Arrays.toString(arr)); // [0,1,2,3,4]